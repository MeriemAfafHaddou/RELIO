import streamlit as st

st.write(""" # üìë Documentation de OT2D API """)

st.write("""
#### Param√®tres de la simulation """)

st.markdown("""
    * **Taille de la fenetre** : c'est le :blue-background[nombre de donn√©es] √† consid√©rer pour le calcul de la m√©trique de drift. \n
    * **M√©trique de la d√©tection** : c'est la m√©trique bas√©e sur le transport optimal pour :blue-background[comparer les distributions] de donn√©es afin de d√©tecter le drift.Le transport optimal poss√®de une vari√©t√© de m√©triques. Nous avons opt√© pour celles les plus utilis√©es dans la litt√©rature. \n
    * **Fonction de co√ªt** : c'est une :blue-background[distance calcul√©e entre les paires de donn√©es] de deux distibutions, utilis√©e par les m√©triques du transport optimal. On trouve : la distance euclidienne et sa version standaris√©e, et la distance de Mahalanobis. \n
    * **Pourcentage d'alerte** : c'est le :blue-background[pourcentage de changement de distribution] √† partir duquel une alerte est d√©clench√©e. Autrement dit, si la metrique de comparaison augmente de 20% alors une alerte est d√©clench√©e. \n
    * **Pourcentage de d√©tection** : c'est le :blue-background[pourcentage de changement de distribution] √† partir duquel le drift est d√©tect√©. Autrement dit, si la metrique de comparaison augmente de 50% alors le drift est d√©tect√©. \n
    * **Seuil de stabilit√©** : C'est :blue-background[le nombre de fenetre] pour dire que les donn√©es sont :blue-background[stables sur une distribution], autrement dit : absence de drift \n
""")